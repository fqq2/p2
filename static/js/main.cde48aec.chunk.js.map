{"version":3,"sources":["PageTabs.js","GridCard.js","GridView.js","App.js","index.js"],"names":["PageTabs","tabName","this","props","currentView","event","preventDefault","onViewChange","className","isActiveTab","onClick","e","onTabClick","React","Component","renderButton","taskId","column","btnText","callbackFn","onCardAction","GridCard","title","id","type","prevTxt","onPrevClick","nextTxt","onNextClick","COLUMN_NAMES","GridView","bind","columnName","tasks","inProgress","find","task","findTask","columnIndex","findIndex","name","onUpdateTask","length","post","key","todoCards","todo","map","renderCardColumn","inProgressCards","reviewCards","review","doneCards","done","App","state","view","allTasks","sortedTasks","errorText","getTasks","axios","get","then","response","setState","data","sortTasks","catch","error","errorMessage","message","filter","_task","index","jsx","wrapPage","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.cde48aec.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass PageTabs extends React.Component {\r\n\r\n  isActiveTab(tabName) {\r\n    return (tabName === this.props.currentView) ? 'nav-link active' : 'nav-link';\r\n  }\r\n\r\n  onTabClick(event, tabName) {\r\n    event.preventDefault();\r\n    this.props.onViewChange(tabName);\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <ul className='nav'>\r\n        <li className='nav-item'>\r\n          <label className={this.isActiveTab('grid')}\r\n             onClick={(e) => this.onTabClick(e, 'grid')}>\r\n            Grid View\r\n          </label>\r\n        </li>\r\n      </ul>\r\n    )\r\n  }\r\n\r\n};\r\n\r\nexport default PageTabs;\r\n","import React from 'react';\r\n\r\nconst renderButton = (taskId, column, btnText, callbackFn) => {\r\n    if (btnText && callbackFn) {\r\n        return (\r\n            <div className=\"m-2\">\r\n                <button\r\n                   className=\"btn btn-outline-primary\"\r\n                   onClick={onCardAction(taskId, column, callbackFn)}>\r\n                    { btnText }\r\n                </button>\r\n            </div>\r\n        );\r\n    } else {\r\n        return <span />;\r\n    }\r\n}\r\n\r\nconst onCardAction = (taskId, column, callbackFn) => {\r\n    return () => {\r\n        callbackFn(taskId, column);\r\n    };\r\n}\r\n\r\nconst GridCard = props => {\r\n\r\n    return (\r\n        <div className=\"m-2\">\r\n            <div className=\"card\">\r\n                <div className=\"card-body\">\r\n                    <h4 className=\"card-title\">\r\n                        { props.title }\r\n                    </h4>\r\n                    <div className=\"card-text\">\r\n                        <div>ID: {props.id }</div>\r\n                        <div>Type: {props.type }</div>\r\n                        { renderButton(props.id, props.column, props.prevTxt, props.onPrevClick) }\r\n                        { renderButton(props.id, props.column, props.nextTxt, props.onNextClick) }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GridCard;\r\n","import React from 'react';\r\n\r\nimport GridCard from './GridCard';\r\n\r\nconst COLUMN_NAMES = ['todo', 'in-progress', 'review', 'done'];\r\n\r\nclass GridView extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.onPrevClick = this.onPrevClick.bind(this);\r\n        this.onNextClick = this.onNextClick.bind(this);\r\n    }\r\n\r\n    findTask(taskId, columnName) {\r\n        const columnTasks = (columnName === 'in-progress') ? this.props.tasks.inProgress : this.props.tasks[columnName];\r\n        return columnTasks.find(task => task.id === taskId);\r\n    }\r\n\r\n    onPrevClick(taskId, columnName) {\r\n        let task = this.findTask(taskId, columnName);\r\n        let columnIndex = COLUMN_NAMES.findIndex(name => task.column === name);\r\n\r\n        if (columnIndex > 0) {\r\n            columnIndex--\r\n            task.column = COLUMN_NAMES[columnIndex];\r\n            this.props.onUpdateTask(task);\r\n        }\r\n    }\r\n\r\n    onNextClick(taskId, columnName) {\r\n        let task = this.findTask(taskId, columnName);\r\n        let columnIndex = COLUMN_NAMES.findIndex(name => task.column === name);\r\n\r\n        if (columnIndex < COLUMN_NAMES.length) {\r\n            columnIndex++\r\n            task.column = COLUMN_NAMES[columnIndex];\r\n            this.props.onUpdateTask(task);\r\n        }\r\n    }\r\n\r\n    renderCardColumn(post, prevTxt, nextTxt) {\r\n        return (\r\n            <GridCard id={post.id}\r\n                      key={post.id}\r\n                      title={post.title}\r\n                      type={post.type}\r\n                      column={post.column}\r\n                      prevTxt={prevTxt}\r\n                      onPrevClick={this.onPrevClick}\r\n                      nextTxt={nextTxt}\r\n                      onNextClick={this.onNextClick}/>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const todoCards = this.props.tasks.todo\r\n            .map(post => this.renderCardColumn(post, null, 'Start Work >'));\r\n        const inProgressCards = this.props.tasks.inProgress\r\n            .map(post => this.renderCardColumn(post, '< Send Back', 'Request Review >'));\r\n        const reviewCards = this.props.tasks.review\r\n            .map(post => this.renderCardColumn(post, '< More Work Required', 'Mark Done >'));\r\n        const doneCards = this.props.tasks.done\r\n            .map(post => this.renderCardColumn(post, '< Request Re-Review'));\r\n\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col bg-light rounded m-2 shadow\">\r\n                    <h2>\r\n                        To Do\r\n                    </h2>\r\n\r\n                    <div className=\"\">\r\n                        { todoCards }\r\n                    </div>\r\n                </div>\r\n                <div className=\"col border rounded m-2 shadow\">\r\n                    <h2>\r\n                        In Progress\r\n                    </h2>\r\n\r\n                    <div className=\"\">\r\n                        { inProgressCards }\r\n                    </div>\r\n                </div>\r\n                <div className=\"col bg-light rounded m-2 shadow\">\r\n                    <h2>\r\n                        Review\r\n                    </h2>\r\n\r\n                    <div className=\"\">\r\n                        { reviewCards }\r\n                    </div>\r\n                </div>\r\n                <div className=\"col border rounded m-2 shadow\">\r\n                    <h2>\r\n                        Done\r\n                    </h2>\r\n\r\n                    <div className=\"\">\r\n                        { doneCards }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default GridView;\r\n","import React from 'react';\r\nimport axios from 'axios';\r\n\r\nimport PageTabs from './PageTabs';\r\nimport GridView from './GridView';\r\n\r\nclass App extends React.Component {\r\n    state = {\r\n        view: 'grid',\r\n        allTasks: [],\r\n        sortedTasks: {\r\n            todo: [],\r\n            inProgress: [],\r\n            review: [],\r\n            done: []\r\n        },\r\n        errorText: ''\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getTasks();\r\n    }\r\n\r\n    getTasks() {\r\n        axios.get(`http://my-json-server.typicode.com/fqq2/db/posts`)\r\n            .then(response => {\r\n                this.setState({ allTasks: response.data, sortedTasks: this.sortTasks(response.data) });\r\n            }).catch (error => {\r\n            this.setState({ errorMessage: error.message });\r\n        });\r\n    }\r\n\r\n    sortTasks(tasks) {\r\n        return {\r\n            todo: tasks.filter(post => post.column === 'todo'),\r\n            inProgress: tasks.filter(post => post.column === 'in-progress'),\r\n            review: tasks.filter(post => post.column === 'review'),\r\n            done: tasks.filter(post => post.column === 'done'),\r\n        }\r\n    }\r\n\r\n    onUpdateTask(_task) {\r\n        let allTasks = this.state.allTasks;\r\n        const index = allTasks.findIndex(task => task.id === _task.id);\r\n        allTasks[index] = _task;\r\n\r\n        const sortedTasks = this.sortTasks(allTasks);\r\n        this.setState({ allTasks, sortedTasks })\r\n    }\r\n\r\n    onViewChange(view) {\r\n        this.setState({ view });\r\n    }\r\n\r\n    wrapPage(jsx) {\r\n        const { view } = this.state;\r\n        return (\r\n            <div className=\"container\">\r\n            <PageTabs currentView={view}\r\n        onViewChange={this.onViewChange.bind(this)}/>\r\n        {jsx}\r\n    </div>\r\n    );\r\n    }\r\n\r\n    render() {\r\n        const { view } = this.state;\r\n\r\n        if (view === 'grid') {\r\n            return (this.wrapPage(\r\n                <GridView tasks={this.state.sortedTasks} onUpdateTask={(task)=> this.onUpdateTask(task)} />\r\n));\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport default App;\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.querySelector('#root'));\n"],"sourceRoot":""}